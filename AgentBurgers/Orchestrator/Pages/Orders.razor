@page "/orders"
@inject KitchenManager Kitchen
@implements IDisposable

<PageTitle>Order History - AgentBurgers</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 mb-4">üìã Order History</h1>
            
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card metric-card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-success">‚úÖ Completed</h5>
                            <h2 class="card-text">@completedOrders</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card metric-card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-warning">‚è≥ In Progress</h5>
                            <h2 class="card-text">@inProgressOrders</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card metric-card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-danger">‚ùå Failed</h5>
                            <h2 class="card-text">@failedOrders</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card metric-card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-info">‚è±Ô∏è Avg Time</h5>
                            <h2 class="card-text">@averageProcessingTime</h2>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">Recent Orders</h3>
                    <div class="d-flex gap-2">
                        <button class="btn btn-sm btn-outline-primary" @onclick="RefreshOrders">
                            üîÑ Refresh
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="ClearHistory">
                            üóëÔ∏è Clear
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (!orderHistory.Any())
                    {
                        <div class="text-center text-muted py-4">
                            <p>No orders yet. Visit the kitchen to place your first order!</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Time</th>
                                        <th>Order</th>
                                        <th>Status</th>
                                        <th>Duration</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in orderHistory.Take(20))
                                    {
                                        <tr class="@GetRowClass(order.Status)">
                                            <td>
                                                <small>@order.Timestamp.ToString("HH:mm:ss")</small>
                                            </td>
                                            <td>
                                                <div class="order-text">
                                                    @(order.OrderText.Length > 50 ? order.OrderText[..50] + "..." : order.OrderText)
                                                </div>
                                            </td>
                                            <td>
                                                @switch (order.Status)
                                                {
                                                    case OrderStatus.Completed:
                                                        <span class="badge bg-success">‚úÖ Completed</span>
                                                        break;
                                                    case OrderStatus.InProgress:
                                                        <span class="badge bg-warning">‚è≥ Processing</span>
                                                        break;
                                                    case OrderStatus.Failed:
                                                        <span class="badge bg-danger">‚ùå Failed</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                @if (order.CompletedAt.HasValue)
                                                {
                                                    var duration = order.CompletedAt.Value - order.Timestamp;
                                                    <small>@duration.TotalSeconds.ToString("F1")s</small>
                                                }
                                                else if (order.Status == OrderStatus.InProgress)
                                                {
                                                    var duration = DateTime.Now - order.Timestamp;
                                                    <small>@duration.TotalSeconds.ToString("F0")s</small>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-info" @onclick="() => ViewOrderDetails(order.Id)">
                                                    üëÅÔ∏è View
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Order Details Modal -->
    @if (selectedOrder != null)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Order Details</h5>
                        <button type="button" class="btn-close" @onclick="CloseOrderDetails"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <strong>Order ID:</strong> @selectedOrder.Id[..8]...<br/>
                                <strong>Time:</strong> @selectedOrder.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")<br/>
                                <strong>Status:</strong> 
                                @switch (selectedOrder.Status)
                                {
                                    case OrderStatus.Completed:
                                        <span class="badge bg-success">‚úÖ Completed</span>
                                        break;
                                    case OrderStatus.InProgress:
                                        <span class="badge bg-warning">‚è≥ Processing</span>
                                        break;
                                    case OrderStatus.Failed:
                                        <span class="badge bg-danger">‚ùå Failed</span>
                                        break;
                                }
                            </div>
                            <div class="col-md-6">
                                @if (selectedOrder.CompletedAt.HasValue)
                                {
                                    var duration = selectedOrder.CompletedAt.Value - selectedOrder.Timestamp;
                                    <text><strong>Duration:</strong> @(duration.TotalSeconds.ToString("F1")) seconds<br/></text>
                                    <text><strong>Completed:</strong> @selectedOrder.CompletedAt.Value.ToString("HH:mm:ss")<br/></text>
                                }
                            </div>
                        </div>
                        
                        <hr/>
                        
                        <div class="mb-3">
                            <strong>Customer Order:</strong>
                            <div class="border p-2 bg-light">@selectedOrder.OrderText</div>
                        </div>
                        
                        @if (!string.IsNullOrWhiteSpace(selectedOrder.Response))
                        {
                            <div class="mb-3">
                                <strong>Kitchen Response:</strong>
                                <div class="border p-2 bg-light">@selectedOrder.Response</div>
                            </div>
                        }
                        
                        @if (selectedOrder.ProgressSteps.Any())
                        {
                            <div class="mb-3">
                                <strong>Progress Timeline:</strong>
                                <div class="timeline">
                                    @foreach (var step in selectedOrder.ProgressSteps)
                                    {
                                        <div class="timeline-item">
                                            <small class="text-muted">@step.Timestamp.ToString("HH:mm:ss")</small><br/>
                                            @step.Message
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseOrderDetails">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
.metric-card {
    padding: 0.5rem;
}

.timeline {
    position: relative;
    padding-left: 1rem;
}

.timeline-item {
    position: relative;
    padding-bottom: 1rem;
    border-left: 2px solid #dee2e6;
    padding-left: 1rem;
    margin-left: 0.5rem;
}

.timeline-item:before {
    content: '';
    position: absolute;
    left: -5px;
    top: 5px;
    width: 8px;
    height: 8px;
    background: #007bff;
    border-radius: 50%;
}

.timeline-item:last-child {
    border-left: none;
}

.order-text {
    max-width: 300px;
    word-wrap: break-word;
}
</style>

@code {
    private List<OrderHistoryItem> orderHistory = new();
    private OrderHistoryItem? selectedOrder = null;
    private Timer? refreshTimer;
    private bool autoRefreshEnabled = true;
    private int refreshIntervalSeconds = 5;
    private DateTime lastRefreshTime = DateTime.Now;

    private int completedOrders => orderHistory.Count(o => o.Status == OrderStatus.Completed);
    private int inProgressOrders => orderHistory.Count(o => o.Status == OrderStatus.InProgress);
    private int failedOrders => orderHistory.Count(o => o.Status == OrderStatus.Failed);
    private string averageProcessingTime => GetAverageProcessingTime();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to kitchen events
        Kitchen.OrderStarted += OnOrderStarted;
        Kitchen.OrderCompleted += OnOrderCompleted;
        Kitchen.OrderFailed += OnOrderFailed;
        Kitchen.OrderProgressUpdated += OnOrderProgressUpdated;

        await RefreshOrders();
        
        if (autoRefreshEnabled)
        {
            StartAutoRefresh();
        }
    }

    private void StartAutoRefresh()
    {
        refreshTimer?.Dispose();
        refreshTimer = new Timer(async _ =>
        {
            await InvokeAsync(RefreshOrders);
        }, null, TimeSpan.FromSeconds(refreshIntervalSeconds), TimeSpan.FromSeconds(refreshIntervalSeconds));
    }

    private async Task RefreshOrders()
    {
        orderHistory = Kitchen.GetOrderHistory().ToList();
        lastRefreshTime = DateTime.Now;
        await InvokeAsync(StateHasChanged);
    }

    private void ClearHistory()
    {
        // Note: This would require a method in KitchenService to clear history
        // For now, just refresh
        orderHistory.Clear();
        StateHasChanged();
    }

    private void ViewOrderDetails(string orderId)
    {
        selectedOrder = orderHistory.FirstOrDefault(o => o.Id == orderId);
        StateHasChanged();
    }

    private void CloseOrderDetails()
    {
        selectedOrder = null;
        StateHasChanged();
    }

    private string GetRowClass(OrderStatus status) => status switch
    {
        OrderStatus.Completed => "",
        OrderStatus.InProgress => "table-warning",
        OrderStatus.Failed => "table-danger",
        _ => ""
    };

    private string GetAverageProcessingTime()
    {
        var completedOrdersWithTime = orderHistory
            .Where(o => o.Status == OrderStatus.Completed && o.CompletedAt.HasValue)
            .ToList();

        if (!completedOrdersWithTime.Any())
            return "N/A";

        var avgSeconds = completedOrdersWithTime
            .Average(o => (o.CompletedAt!.Value - o.Timestamp).TotalSeconds);

        return $"{avgSeconds:F1}s";
    }

    // Event handlers
    private void OnOrderStarted(object? sender, OrderHistoryItem order)
    {
        InvokeAsync(async () =>
        {
            await RefreshOrders();
        });
    }

    private void OnOrderCompleted(object? sender, OrderHistoryItem order)
    {
        InvokeAsync(async () =>
        {
            await RefreshOrders();
        });
    }

    private void OnOrderFailed(object? sender, OrderHistoryItem order)
    {
        InvokeAsync(async () =>
        {
            await RefreshOrders();
        });
    }

    private void OnOrderProgressUpdated(object? sender, (string OrderId, string Message) update)
    {
        InvokeAsync(async () =>
        {
            var order = orderHistory.FirstOrDefault(o => o.Id == update.OrderId);
            if (order != null)
            {
                order.ProgressSteps.Add(new ProgressStep
                {
                    Timestamp = DateTime.Now,
                    Message = update.Message
                });
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    public void Dispose()
    {
        Kitchen.OrderStarted -= OnOrderStarted;
        Kitchen.OrderCompleted -= OnOrderCompleted;
        Kitchen.OrderFailed -= OnOrderFailed;
        Kitchen.OrderProgressUpdated -= OnOrderProgressUpdated;
        
        refreshTimer?.Dispose();
    }
}
