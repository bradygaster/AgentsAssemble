@page "/"
@inject KitchenManager KitchenSvc
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Web

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 mb-4">üçî AgentBurgers Kitchen</h1>
            <p class="lead">AI-powered restaurant kitchen with specialized agents</p>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">üéØ Place Order</h3>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="orderText" class="form-label">Customer Order</label>
                        <textarea class="form-control" id="orderText" rows="4" 
                                @bind="currentOrder" 
                                placeholder="Enter customer order (e.g., 'I'd like a bacon cheeseburger with waffle fries and a chocolate shake')">
                        </textarea>
                    </div>
                    
                    <div class="d-flex gap-2 mb-3">
                        <button class="btn btn-primary" @onclick="ProcessOrder" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span>üöÄ Process Order</span>
                            }
                        </button>
                        <button class="btn btn-secondary" @onclick="ClearOrder" disabled="@isProcessing">
                            Clear
                        </button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(orderResponse))
                    {
                        <div class="alert alert-success">
                            <h5>Kitchen Response:</h5>
                            <div class="response-text">@orderResponse</div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">üìã Sample Orders</h4>
                </div>
                <div class="card-body">
                    <p class="card-text">Quick test orders:</p>
                    <div class="d-grid gap-2">
                        @foreach (var sample in sampleOrders)
                        {
                            <button class="btn btn-outline-secondary btn-sm text-start" 
                                    @onclick="() => SelectSampleOrder(sample)" 
                                    disabled="@isProcessing">
                                @sample
                            </button>
                        }
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h4 class="card-title">üè≠ Kitchen Agents</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6 mb-2">
                            <div class="agent-status">
                                <span class="badge bg-success">üî• Grill</span>
                            </div>
                        </div>
                        <div class="col-6 mb-2">
                            <div class="agent-status">
                                <span class="badge bg-warning">üçü Fryer</span>
                            </div>
                        </div>
                        <div class="col-6 mb-2">
                            <div class="agent-status">
                                <span class="badge bg-info">üç¶ Dessert</span>
                            </div>
                        </div>
                        <div class="col-6 mb-2">
                            <div class="agent-status">
                                <span class="badge bg-primary">üçΩÔ∏è Plating</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string currentOrder = string.Empty;
    private string orderResponse = string.Empty;
    private bool isProcessing = false;

    private readonly List<string> sampleOrders = new()
    {
        "I'd like a cheeseburger with fries and a chocolate shake",
        "Can I get a bacon cheeseburger with waffle fries?",
        "Just a vanilla shake, please",
        "Double cheeseburger, sweet potato fries, and a fudge sundae",
        "I'll have 2 regular burgers and an order of standard fries",
        "Bacon cheeseburger with both buns toasted and a strawberry shake",
        "Family meal: 3 cheeseburgers, 2 waffle fries, 2 chocolate shakes",
        "Just fries - waffle fries with extra salt"
    };

    private async Task ProcessOrder()
    {
        if (string.IsNullOrWhiteSpace(currentOrder) || isProcessing)
            return;

        isProcessing = true;
        orderResponse = string.Empty;
        StateHasChanged();

        try
        {
            orderResponse = await KitchenSvc.ProcessOrderAsync(currentOrder);
        }
        catch (Exception ex)
        {
            orderResponse = $"Error processing order: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ClearOrder()
    {
        currentOrder = string.Empty;
        orderResponse = string.Empty;
        StateHasChanged();
    }

    private void SelectSampleOrder(string order)
    {
        currentOrder = order;
        orderResponse = string.Empty;
        StateHasChanged();
    }
}
